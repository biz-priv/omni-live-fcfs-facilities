service: omni-live-logistics-fcfs-facilities

plugins:
  - serverless-python-requirements
  - serverless-step-functions

provider:
  name: aws
  runtime: python3.9
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${ssm:/omni-dw/${self:provider.stage}/sls/deployment/bucket}
    serverSideEncryption: AES256
  stackTags:
    Application: Omni live fcfs facilities
    CreateBy: BizCloudExperts
    # Environment: ${self:custom.stage}    
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"
    - Effect: "Allow"
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"
    - Effect: "Allow"
      Action:
        - ssm:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - s3:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - athena:*
      Resource: "*"
    - Effect: "Allow"
      Action: 
        - glue:*
      Resource: "*"
    - Effect: Allow
      Action:
         - sns:*
      Resource: "*"
package:
  individually: true

functions:
  fcfsFacilities: ${file(config/functions/fcfs-facilities.yml):function}
  queryAthena: ${file(config/functions/query-athena.yml):function}

stepFunctions:
  stateMachines:
    fcfs-facilities: ${file(config/step-function/fcfs-facilities-statemachine.yml):stateMachine}

resources:
  Resources:

    # MySSMParameter:
    #   Type: "AWS::SSM::Parameter"
    #   Properties:
    #     Name: '/fcfsfacilities/bucket/key/parameter/${self:provider.stage}'
    #     Type: "String"
    #     Value: "default_value"
    # Username:
    #   Type: "AWS::SSM::Parameter"
    #   Properties:
    #     Name: '/fcfsfacilities/lvlp/username/${self:provider.stage}'
    #     Type: "String"
    #     Value: "apiuser"
    # Password:
    #   Type: "AWS::SSM::Parameter"
    #   Properties:
    #     Name: '/fcfsfacilities/lvlp/password/${self:provider.stage}'
    #     Type: "String"
    #     Value: "lvlpapiuser"
    omniLiveLogisticsErrorNotification: ${file(config/omniLiveLogisticsErrorNotification/topic.yml):omniLiveLogisticsErrorNotification}
    omniLiveLogisticsEmailSubscription: ${file(config/omniLiveLogisticsErrorNotification/subscription.yml):omniLiveLogisticsEmailSubscription}

    fcfsfacilities: ${file(config/dynamo/fcfs-facilities-table.yml):fcfs-facilities}

    stateMachineRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: fcfs-facilities-stepfuction-role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
        Policies:
          - PolicyName: statePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - s3:*
                    - s3-object-lambda:*
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - states:RedriveExecution
                    - states:StartExecution
                    - states:DescribeExecution
                    - states:StopExecution
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - events:PutTargets
                    - events:PutRule
                    - events:DescribeRule
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - xray:PutTraceSegments
                    - xray:PutTelemetryRecords
                    - xray:GetSamplingRules
                    - xray:GetSamplingTargets
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
# custom:
#   pythonRequirements:
#     dockerizePip: true
